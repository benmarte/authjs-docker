version: "3.8"

services:
  traefik:
    image: traefik:v3.0
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
      - "8181:8080" # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  postgresql:
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    env_file:
      - .env

  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data

  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.4.2}
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_EXTERNAL_HOST: authentik.local # Add this line
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
      - ./config/application.yaml:/import/application.yaml # Add this line

    env_file:
      - .env
    ports:
      - "${COMPOSE_PORT_HTTP:-9000}:9000"
      - "${COMPOSE_PORT_HTTPS:-9443}:9443"
    depends_on:
      - postgresql
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authentik.rule=Host(`authentik.local`)"
      - "traefik.http.routers.authentik.entrypoints=web"
      - "traefik.http.services.authentik.loadbalancer.server.port=9000"

  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.4.2}
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    env_file:
      - .env
    depends_on:
      - postgresql
      - redis

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.4
    environment:
      - APP_URL=http://webapp.local
      - KC_DB=postgres
      - KC_DB_PASSWORD=admin
      - KC_DB_URL=jdbc:postgresql://postgres/keycloak
      - KC_DB_USERNAME=admin
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KEYCLOAK_REALM=webapp
      - KEYCLOAK_SECRET=VGsMkT5TpQco0ljGH4BTG98tPDf59XzY
    volumes:
      - ./keycloak/import/webapp:/opt/keycloak/data/import
    depends_on:
      - postgres
    ports:
      - "8080:8080"
      - "8787:8787"
    command:
      - start-dev
      - --features=admin-fine-grained-authz
      - --import-realm
      - --proxy-headers=forwarded
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=Host(`keycloak.local`)"
      - "traefik.http.routers.keycloak.entrypoints=web"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"

  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "keycloak", "-U", "admin"]
      timeout: 45s
      interval: 10s
      retries: 10
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=keycloak
    ports:
      - "5432:5432"

  webapp:
    build:
      context: ./nextjs-auth-example
      dockerfile: Dockerfile
    environment:
      # Auth.js Authentik env vars
      - AUTH_AUTHENTIK_CLIENT_ID=1fajAUKVCzomEnuZCmCQb72EZ3SzDuTaJ1EGtaI6
      - AUTH_AUTHENTIK_CLIENT_SECRET=xnG0X5eUN4rtOiU12vF5kugq6WBFduGomzB3HtnFjXGexXaEcitMkyvOabmP1UOQ740GnnX2IGIJYHmPYuIepYzRjMxIcSVC5A8ePBJINsPsC2VNqVjWS24GOmoUTA9N
      - AUTH_AUTHENTIK_ISSUER=http://authentik.local/application/o/webapp/

      # Auth.js Keycloak env vars
      - AUTH_KEYCLOAK_ID=webapp
      - AUTH_KEYCLOAK_ISSUER=http://keycloak.local/realms/webapp
      - AUTH_KEYCLOAK_SECRET=VGsMkT5TpQco0ljGH4BTG98tPDf59XzY

      # Auth.js env vars
      - AUTH_SECRET=MohY0/2zSQw/psWEnejC2ka3Al0oifvY4YjOkUaFfnI=
      - AUTH_TRUST_HOST=true
      - AUTH_URL=http://webapp.local/auth
    # env_file:
    #   - ./nextjs-auth-example/.env
    ports:
      - "3000:3000"
    extra_hosts:
      - "authentik.local:host-gateway" # Add this line to resolve authentik.local
      - "webapp.local:host-gateway" # Add this line to resolve webapp.local
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.webapp.rule=Host(`webapp.local`)"
      - "traefik.http.routers.webapp.entrypoints=web"
      - "traefik.http.services.webapp.loadbalancer.server.port=3000"

volumes:
  database:
    driver: local
  redis:
    driver: local
